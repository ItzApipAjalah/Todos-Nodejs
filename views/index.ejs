<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo List</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-gray-50">
    <!-- Mobile Header -->
    <div class="lg:hidden bg-white shadow-sm p-4 flex justify-between items-center">
        <h1 class="text-xl font-bold text-gray-800">Todo List</h1>
        <button onclick="toggleMenu()" class="text-gray-600 hover:text-gray-800">
            <i class="fas fa-bars text-2xl"></i>
        </button>
    </div>

    <div class="flex h-[calc(100vh-64px)] lg:h-screen">
        <!-- Sidebar -->
        <div id="sidebar" class="fixed inset-0 lg:static lg:inset-auto w-64 bg-white shadow-lg transform -translate-x-full lg:transform-none transition-transform duration-200 ease-in-out z-30">
            <div class="p-4">
                <h1 class="text-2xl font-bold text-gray-800 mb-8 hidden lg:block">Todo List</h1>
                <nav>
                    <a href="/" class="flex items-center p-3 text-gray-700 hover:bg-gray-100 rounded-lg mb-2">
                        <i class="fas fa-tasks mr-3"></i>
                        All Tasks
                    </a>
                    <a href="/?status=pending" class="flex items-center p-3 text-gray-700 hover:bg-gray-100 rounded-lg mb-2">
                        <i class="fas fa-clock mr-3"></i>
                        Pending Tasks
                    </a>
                    <a href="/?status=completed" class="flex items-center p-3 text-gray-700 hover:bg-gray-100 rounded-lg mb-2">
                        <i class="fas fa-check-circle mr-3"></i>
                        Completed Tasks
                    </a>
                </nav>
            </div>
        </div>

        <!-- Overlay -->
        <div id="overlay" onclick="toggleMenu()" class="fixed inset-0 bg-black bg-opacity-50 z-20 hidden lg:hidden"></div>

        <!-- Main Content -->
        <div class="flex-1 overflow-auto">
            <% if (!user) { %>
                <!-- Guest User Alert -->
                <div class="bg-red-50 border-l-4 border-red-500 p-4 m-4 lg:m-8 mb-0 lg:mb-0">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-circle text-red-500 text-xl"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-red-800 font-medium">Local Storage Mode</h3>
                            <div class="text-red-700 text-sm mt-1">
                                You are currently using local storage. Your todos will only be saved in this browser. 
                                <a href="/auth/login" class="font-medium underline hover:text-red-900">Login</a> or 
                                <a href="/auth/signup" class="font-medium underline hover:text-red-900">Sign up</a> 
                                to save your todos in the cloud.
                            </div>
                        </div>
                    </div>
                </div>
            <% } %>
            
            <div class="p-4 lg:p-8">
                <!-- Header with Add Task Button -->
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800">
                        <%= query.status ? (query.status.charAt(0).toUpperCase() + query.status.slice(1)) : 'All' %> Tasks
                    </h2>
                    <button onclick="openModal()" 
                            class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors flex items-center gap-2">
                        <i class="fas fa-plus"></i>
                        Add New Task
                    </button>
                </div>

                <!-- Category Sections -->
                <div class="space-y-6">
                    <!-- Server-rendered categories for logged-in users -->
                    <% if (user) { %>
                        <% const categories = ['work', 'personal', 'shopping', 'others']; %>
                        <% const categoryStyles = {
                            'work': {
                                header: 'bg-blue-50',
                                border: 'border-l-4 border-blue-500',
                                text: 'text-blue-700',
                                count: 'text-blue-600',
                                hover: 'hover:bg-blue-50/50'
                            },
                            'personal': {
                                header: 'bg-purple-50',
                                border: 'border-l-4 border-purple-500',
                                text: 'text-purple-700',
                                count: 'text-purple-600',
                                hover: 'hover:bg-purple-50/50'
                            },
                            'shopping': {
                                header: 'bg-green-50',
                                border: 'border-l-4 border-green-500',
                                text: 'text-green-700',
                                count: 'text-green-600',
                                hover: 'hover:bg-green-50/50'
                            },
                            'others': {
                                header: 'bg-gray-50',
                                border: 'border-l-4 border-gray-500',
                                text: 'text-gray-700',
                                count: 'text-gray-600',
                                hover: 'hover:bg-gray-50/50'
                            }
                        }; %>
                        <% categories.forEach(category => { %>
                            <% const categoryTodos = todos.filter(todo => todo.category === category); %>
                            <% if (categoryTodos.length > 0) { %>
                                <div class="bg-white rounded-lg shadow-sm overflow-hidden <%= categoryStyles[category].border %>">
                                    <!-- Category Header -->
                                    <div class="p-4 <%= categoryStyles[category].header %> border-b flex items-center justify-between cursor-pointer"
                                         onclick="toggleCategory('<%= category %>')">
                                        <div class="flex items-center gap-2">
                                            <span class="text-xl">
                                                <%= {
                                                    'work': '🏢',
                                                    'personal': '👤',
                                                    'shopping': '🛒',
                                                    'others': '📌'
                                                }[category] %>
                                            </span>
                                            <h3 class="text-lg font-semibold capitalize <%= categoryStyles[category].text %>">
                                                <%= category %>
                                            </h3>
                                            <span class="text-sm <%= categoryStyles[category].count %>">
                                                (<%= categoryTodos.length %>)
                                            </span>
                                        </div>
                                        <i class="fas fa-chevron-down <%= categoryStyles[category].text %> transform transition-transform" id="<%= category %>-icon"></i>
                                    </div>
                                    <!-- Category Todos -->
                                    <div class="divide-y" id="<%= category %>-todos">
                                        <% categoryTodos.forEach(todo => { %>
                                            <div class="p-4 <%= categoryStyles[category].hover %>">
                                                <div class="flex items-start justify-between gap-4">
                                                    <div class="flex-1">
                                                        <div class="flex items-center gap-2 mb-1">
                                                            <span class="flex-shrink-0 w-5 h-5 rounded-full border-2 <%= todo.status === 'completed' ? 'bg-green-500 border-green-500' : 'border-gray-300' %> cursor-pointer"
                                                                  onclick="document.getElementById('status-form-<%= todo.id %>').submit();">
                                                                <% if (todo.status === 'completed') { %>
                                                                    <i class="fas fa-check text-white text-xs flex items-center justify-center h-full"></i>
                                                                <% } %>
                                                            </span>
                                                            <span class="ml-2 px-2 py-1 rounded text-sm <%= {
                                                                'low': 'bg-green-100 text-green-600',
                                                                'medium': 'bg-yellow-100 text-yellow-600',
                                                                'high': 'bg-red-100 text-red-600'
                                                            }[todo.priority || 'low'] %>">
                                                                <%= {
                                                                    'low': '🟢 Low',
                                                                    'medium': '🟡 Medium',
                                                                    'high': '🔴 High'
                                                                }[todo.priority || 'low'] %>
                                                            </span>
                                                            <span class="text-sm text-gray-500">
                                                                Due: <%= todo.duedate ? new Date(todo.duedate).toLocaleString('en-US', {
                                                                    month: 'short',
                                                                    day: 'numeric',
                                                                    hour: '2-digit',
                                                                    minute: '2-digit'
                                                                }) : 'No due date' %>
                                                            </span>
                                                        </div>
                                                        <h4 class="text-lg <%= todo.status === 'completed' ? 'line-through text-gray-500' : 'text-gray-800' %>">
                                                            <%= todo.title %>
                                                        </h4>
                                                        <ul class="mt-2 space-y-1">
                                                            <% JSON.parse(todo.description).forEach(item => { %>
                                                                <li class="flex items-start gap-2 text-sm text-gray-600">
                                                                    <span class="text-gray-400">•</span>
                                                                    <%= item %>
                                                                </li>
                                                            <% }); %>
                                                        </ul>
                                                    </div>
                                                    <div class="flex gap-2">
                                                        <form id="status-form-<%= todo.id %>" action="/todos/<%= todo.id %>?_method=PUT" method="POST" class="hidden">
                                                            <input type="hidden" name="status" value="<%= todo.status === 'pending' ? 'completed' : 'pending' %>">
                                                        </form>
                                                        <form action="/todos/<%= todo.id %>?_method=DELETE" method="POST">
                                                            <button type="submit" class="text-sm px-3 py-1 rounded-lg bg-red-100 text-red-600 hover:bg-red-200">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        </form>
                                                        <button onclick="openEditModal('<%= todo.id %>')" 
                                                                class="text-sm px-3 py-1 rounded-lg bg-blue-100 text-blue-600 hover:bg-blue-200">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    </div>
                                </div>
                            <% } %>
                        <% }); %>
                    <% } else { %>
                        <!-- Client-rendered todos for guest users -->
                        <div class="todos-list space-y-4"></div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Right Sidebar - Profile -->
        <div id="profileSidebar" class="fixed inset-y-0 right-0 w-80 bg-white shadow-lg transform translate-x-full lg:transform-none transition-transform duration-200 ease-in-out z-30 lg:static lg:inset-auto">
            <div class="p-6">
                <div class="text-center mb-6">
                    <div class="w-20 h-20 rounded-full bg-gray-200 mx-auto mb-4 flex items-center justify-center">
                        <i class="fas fa-user text-3xl text-gray-400"></i>
                    </div>
                    <h2 class="text-xl font-semibold" <%= user ? 'data-user-email="' + user.email + '"' : '' %>>
                        <%= user ? user.email : 'Guest User' %>
                    </h2>
                </div>

                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div class="bg-blue-50 p-4 rounded-lg text-center">
                        <div class="text-2xl font-bold text-blue-600 completed-count">
                            <%= user ? todos.filter(t => t.status === 'completed').length : '0' %>
                        </div>
                        <div class="text-sm text-gray-600">Completed</div>
                    </div>
                    <div class="bg-yellow-50 p-4 rounded-lg text-center">
                        <div class="text-2xl font-bold text-yellow-600 pending-count">
                            <%= user ? todos.filter(t => t.status === 'pending').length : '0' %>
                        </div>
                        <div class="text-sm text-gray-600">Pending</div>
                    </div>
                </div>

                <div class="border-t pt-6">
                    <% if (user) { %>
                        <a href="/auth/logout" class="block w-full text-center bg-red-500 text-white py-2 rounded-lg hover:bg-red-600 transition-colors">
                            Logout
                        </a>
                    <% } else { %>
                        <div class="space-y-3">
                            <a href="/auth/login" class="block w-full text-center bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition-colors">
                                Login
                            </a>
                            <a href="/auth/signup" class="block w-full text-center bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors">
                                Sign Up
                            </a>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <!-- Profile Toggle Button (Mobile) -->
    <button onclick="toggleProfile()" class="lg:hidden fixed bottom-4 right-4 bg-blue-500 text-white w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-40">
        <i class="fas fa-user"></i>
    </button>

    <!-- Add Todo Modal -->
    <div id="todoModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-lg w-full max-w-md mx-4 max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-gray-800">Add New Task</h3>
                    <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <form action="/todos" method="POST">
                    <!-- Title -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Title</label>
                        <input type="text" name="title" required
                               class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                    </div>

                    <!-- Description Items -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description Items</label>
                        <div id="description-items" class="space-y-2">
                            <div class="flex gap-2">
                                <input type="text" name="description[]"
                                       class="flex-1 p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                                <button type="button" onclick="removeDescriptionItem(this)"
                                        class="px-3 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <button type="button" onclick="addDescriptionItem()"
                                class="mt-2 text-sm px-4 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200">
                            <i class="fas fa-plus mr-2"></i> Add Item
                        </button>
                    </div>

                    <!-- Due Date -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                        <input type="datetime-local" name="dueDate" required
                               value="<%= new Date().toISOString().slice(0, 16) %>"
                               class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                    </div>

                    <!-- Priority -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                        <select name="priority" required
                                class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            <option value="low" selected>🟢 Low Priority</option>
                            <option value="medium">🟡 Medium Priority</option>
                            <option value="high">🔴 High Priority</option>
                        </select>
                    </div>

                    <!-- Category -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                        <select name="category" required
                                class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            <option value="work">🏢 Work</option>
                            <option value="personal">👤 Personal</option>
                            <option value="shopping">🛒 Shopping</option>
                            <option value="others">📌 Others</option>
                        </select>
                    </div>

                    <div class="flex justify-end gap-2">
                        <button type="button" onclick="closeModal()"
                                class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
                            Cancel
                        </button>
                        <button type="submit"
                                class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                            Add Task
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Todo Modal -->
    <div id="editTodoModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white rounded-lg w-full max-w-md mx-4 max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold text-gray-800">Edit Task</h3>
                    <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                
                <form id="editTodoForm" action="" method="POST">
                    <input type="hidden" name="_method" value="PUT">
                    <!-- Title -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Title</label>
                        <input type="text" name="title" id="editTitle" required
                               class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                    </div>

                    <!-- Description Items -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description Items</label>
                        <div id="editDescriptionItems" class="space-y-2">
                            <!-- Description items will be added here -->
                        </div>
                        <button type="button" onclick="addEditDescriptionItem()"
                                class="mt-2 text-sm px-4 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200">
                            <i class="fas fa-plus mr-2"></i> Add Item
                        </button>
                    </div>

                    <!-- Due Date -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                        <input type="datetime-local" name="dueDate" id="editDueDate" required
                               class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                    </div>

                    <!-- Priority -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                        <select name="priority" id="editPriority" required
                                class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            <option value="low">🟢 Low Priority</option>
                            <option value="medium">🟡 Medium Priority</option>
                            <option value="high">🔴 High Priority</option>
                        </select>
                    </div>

                    <!-- Category -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                        <select name="category" id="editCategory" required
                                class="w-full p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                            <option value="work">🏢 Work</option>
                            <option value="personal">👤 Personal</option>
                            <option value="shopping">🛒 Shopping</option>
                            <option value="others">📌 Others</option>
                        </select>
                    </div>

                    <div class="flex justify-end gap-2">
                        <button type="button" onclick="closeEditModal()"
                                class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg">
                            Cancel
                        </button>
                        <button type="submit"
                                class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Move this to the top
        const todos = <%- todosJson %>;

        function toggleMenu() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');
            
            sidebar.classList.toggle('-translate-x-full');
            overlay.classList.toggle('hidden');
        }

        function toggleProfile() {
            const profileSidebar = document.getElementById('profileSidebar');
            profileSidebar.classList.toggle('translate-x-full');
        }

        // Local Storage Todo Management
        class LocalTodoManager {
            constructor() {
                this.STORAGE_KEY = 'todos';
                this.initializeStorage();
                this.renderTodos();
            }

            initializeStorage() {
                if (!localStorage.getItem(this.STORAGE_KEY)) {
                    localStorage.setItem(this.STORAGE_KEY, JSON.stringify([]));
                }
            }

            getTodos() {
                return JSON.parse(localStorage.getItem(this.STORAGE_KEY) || '[]');
            }

            saveTodos(todos) {
                localStorage.setItem(this.STORAGE_KEY, JSON.stringify(todos));
            }

            addTodo(title, descriptionItems) {
                const todos = this.getTodos();
                const category = document.querySelector('select[name="category"]')?.value || 'others';
                const priority = document.querySelector('select[name="priority"]')?.value || 'low';
                const dueDate = document.querySelector('input[name="dueDate"]')?.value || new Date().toISOString();

                const newTodo = {
                    id: Date.now().toString(),
                    title,
                    description: JSON.stringify(Array.isArray(descriptionItems) ? descriptionItems : [descriptionItems]),
                    category,
                    priority,
                    dueDate,
                    status: 'pending',
                    createdAt: new Date().toISOString()
                };
                todos.push(newTodo);
                this.saveTodos(todos);
                this.renderTodos();
            }

            updateTodoStatus(id, status) {
                const todos = this.getTodos();
                const todoIndex = todos.findIndex(todo => todo.id === id);
                if (todoIndex !== -1) {
                    todos[todoIndex].status = status;
                    this.saveTodos(todos);
                    this.renderTodos();
                }
            }

            deleteTodo(id) {
                const todos = this.getTodos();
                const filteredTodos = todos.filter(todo => todo.id !== id);
                this.saveTodos(filteredTodos);
                this.renderTodos();
            }

            editTodo(id, todoData) {
                const todos = this.getTodos();
                const todoIndex = todos.findIndex(todo => todo.id === id);
                if (todoIndex !== -1) {
                    todos[todoIndex] = {
                        ...todos[todoIndex],
                        ...todoData,
                        description: JSON.stringify(Array.isArray(todoData.description) 
                            ? todoData.description 
                            : [todoData.description])
                    };
                    this.saveTodos(todos);
                    this.renderTodos();
                    closeEditModal();
                }
            }

            renderTodos() {
                const todosList = document.querySelector('.todos-list');
                const isLoggedIn = document.querySelector('[data-user-email]');
                
                if (isLoggedIn) {
                    return;
                }

                const todos = this.getTodos();
                const statusFilter = new URLSearchParams(window.location.search).get('status');
                
                let filteredTodos = todos;
                if (statusFilter) {
                    filteredTodos = todos.filter(todo => todo.status === statusFilter);
                }

                if (!isLoggedIn) {
                    document.querySelector('.completed-count').textContent = 
                        todos.filter(t => t.status === 'completed').length;
                    document.querySelector('.pending-count').textContent = 
                        todos.filter(t => t.status === 'pending').length;
                }

                const categories = ['work', 'personal', 'shopping', 'others'];
                const categoryIcons = {
                    'work': '🏢',
                    'personal': '👤',
                    'shopping': '🛒',
                    'others': '📌'
                };

                const priorityClasses = {
                    'low': 'bg-green-100 text-green-600',
                    'medium': 'bg-yellow-100 text-yellow-600',
                    'high': 'bg-red-100 text-red-600'
                };

                const priorityLabels = {
                    'low': '🟢 Low',
                    'medium': '🟡 Medium',
                    'high': '🔴 High'
                };

                // Generate HTML for each category
                todosList.innerHTML = categories.map(category => {
                    const categoryTodos = filteredTodos.filter(todo => todo.category === category);
                    if (categoryTodos.length === 0) return '';

                    const categoryStyles = {
                        'work': {
                            header: 'bg-blue-50',
                            border: 'border-l-4 border-blue-500',
                            text: 'text-blue-700',
                            count: 'text-blue-600',
                            hover: 'hover:bg-blue-50/50'
                        },
                        'personal': {
                            header: 'bg-purple-50',
                            border: 'border-l-4 border-purple-500',
                            text: 'text-purple-700',
                            count: 'text-purple-600',
                            hover: 'hover:bg-purple-50/50'
                        },
                        'shopping': {
                            header: 'bg-green-50',
                            border: 'border-l-4 border-green-500',
                            text: 'text-green-700',
                            count: 'text-green-600',
                            hover: 'hover:bg-green-50/50'
                        },
                        'others': {
                            header: 'bg-gray-50',
                            border: 'border-l-4 border-gray-500',
                            text: 'text-gray-700',
                            count: 'text-gray-600',
                            hover: 'hover:bg-gray-50/50'
                        }
                    };

                    return `
                        <div class="bg-white rounded-lg shadow-sm overflow-hidden mb-4 ${categoryStyles[category].border}">
                            <!-- Category Header -->
                            <div class="p-4 ${categoryStyles[category].header} border-b flex items-center justify-between cursor-pointer"
                                 onclick="toggleCategory('${category}')">
                                <div class="flex items-center gap-2">
                                    <span class="text-xl">
                                        ${categoryIcons[category]}
                                    </span>
                                    <h3 class="text-lg font-semibold capitalize ${categoryStyles[category].text}">${category}</h3>
                                    <span class="text-sm ${categoryStyles[category].count}">(${categoryTodos.length})</span>
                                </div>
                                <i class="fas fa-chevron-down ${categoryStyles[category].text} transform transition-transform" id="${category}-icon"></i>
                            </div>
                            <!-- Category Todos -->
                            <div class="divide-y" id="${category}-todos">
                                ${categoryTodos
                                    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                                    .map(todo => `
                                        <div class="p-4 ${categoryStyles[category].hover}">
                                            <div class="flex items-start justify-between gap-4">
                                                <div class="flex-1">
                                                    <div class="flex items-center gap-2 mb-1">
                                                        <span class="flex-shrink-0 w-5 h-5 rounded-full border-2 ${
                                                            todo.status === 'completed' 
                                                                ? 'bg-green-500 border-green-500' 
                                                                : 'border-gray-300'
                                                        } cursor-pointer"
                                                              onclick="todoManager.updateTodoStatus('${todo.id}', '${
                                                                todo.status === 'pending' ? 'completed' : 'pending'
                                                            }')">
                                                            ${todo.status === 'completed' 
                                                                ? '<i class="fas fa-check text-white text-xs flex items-center justify-center h-full"></i>' 
                                                                : ''}
                                                        </span>
                                                        <span class="ml-2 px-2 py-1 rounded text-sm ${priorityClasses[todo.priority || 'low']}">
                                                            ${priorityLabels[todo.priority || 'low']}
                                                        </span>
                                                        <span class="text-sm text-gray-500">
                                                            Due: ${new Date(todo.dueDate).toLocaleString('en-US', {
                                                                month: 'short',
                                                                day: 'numeric',
                                                                hour: '2-digit',
                                                                minute: '2-digit'
                                                            })}
                                                        </span>
                                                    </div>
                                                    <h4 class="text-lg ${todo.status === 'completed' ? 'line-through text-gray-500' : 'text-gray-800'}">
                                                        ${todo.title}
                                                    </h4>
                                                    <ul class="mt-2 space-y-1">
                                                        ${JSON.parse(todo.description).map(item => `
                                                            <li class="flex items-start gap-2 text-sm text-gray-600">
                                                                <span class="text-gray-400">•</span>
                                                                ${item}
                                                            </li>
                                                        `).join('')}
                                                    </ul>
                                                </div>
                                                <div class="flex gap-2">
                                                    <button onclick="todoManager.deleteTodo('${todo.id}')"
                                                            class="text-sm px-3 py-1 rounded-lg bg-red-100 text-red-600 hover:bg-red-200">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                    <button onclick="openEditModal('${todo.id}')" 
                                                            class="text-sm px-3 py-1 rounded-lg bg-blue-100 text-blue-600 hover:bg-blue-200">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    `).join('')}
                            </div>
                        </div>
                    `;
                }).join('');
            }
        }

        // Initialize todo manager only for guest users
        const isLoggedIn = document.querySelector('[data-user-email]');
        let todoManager;
        
        if (!isLoggedIn) {
            todoManager = new LocalTodoManager();
        }

        // Handle form submission for guest users
        document.querySelector('form').addEventListener('submit', function(e) {
            if (!isLoggedIn) { // If guest user
                e.preventDefault();
                const title = this.querySelector('[name="title"]').value;
                
                // Get all description items, filter out empty ones
                const descriptionItems = Array.from(this.querySelectorAll('[name="description[]"]'))
                    .map(input => input.value.trim())
                    .filter(value => value !== '');

                // If no description items, add an empty one
                if (descriptionItems.length === 0) {
                    descriptionItems.push('No description');
                }

                todoManager.addTodo(title, descriptionItems);
                this.reset();
                closeModal();
            }
        });

        function addDescriptionItem() {
            const container = document.getElementById('description-items');
            const newItem = document.createElement('div');
            newItem.className = 'flex gap-2';
            newItem.innerHTML = `
                <input type="text" name="description[]"
                       class="flex-1 p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                <button type="button" onclick="removeDescriptionItem(this)"
                        class="px-3 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200">
                    <i class="fas fa-times"></i>
                </button>
            `;
            container.appendChild(newItem);
        }

        function removeDescriptionItem(button) {
            const container = document.getElementById('description-items');
            if (container.children.length > 1) {
                button.parentElement.remove();
            }
        }

        function openModal() {
            document.getElementById('todoModal').classList.remove('hidden');
            document.getElementById('todoModal').classList.add('flex');
        }

        function closeModal() {
            document.getElementById('todoModal').classList.add('hidden');
            document.getElementById('todoModal').classList.remove('flex');
        }

        function toggleCategory(category) {
            const todos = document.getElementById(`${category}-todos`);
            const icon = document.getElementById(`${category}-icon`);
            
            if (todos.style.display === 'none') {
                todos.style.display = 'block';
                icon.classList.remove('rotate-180');
            } else {
                todos.style.display = 'none';
                icon.classList.add('rotate-180');
            }
        }

        // Close modal when clicking outside
        document.getElementById('todoModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        function openEditModal(todoId) {
            let todo;
            if (isLoggedIn) {
                todo = todos.find(t => t.id.toString() === todoId.toString());
            } else {
                todo = todoManager.getTodos().find(t => t.id === todoId);
            }

            if (!todo) {
                console.log('Todo not found:', todoId);
                return;
            }

            // Set form action and handler
            const form = document.getElementById('editTodoForm');
            if (isLoggedIn) {
                form.action = `/todos/${todoId}?_method=PUT`;
            } else {
                form.onsubmit = function(e) {
                    e.preventDefault();
                    const formData = {
                        title: document.getElementById('editTitle').value,
                        description: Array.from(document.querySelectorAll('#editDescriptionItems input[name="description[]"]'))
                            .map(input => input.value.trim())
                            .filter(value => value !== ''),
                        dueDate: document.getElementById('editDueDate').value,
                        priority: document.getElementById('editPriority').value,
                        category: document.getElementById('editCategory').value
                    };
                    todoManager.editTodo(todoId, formData);
                };
            }

            // Fill form fields
            document.getElementById('editTitle').value = todo.title;
            
            // Handle the date conversion properly
            const dueDate = new Date(todo.duedate || todo.dueDate);
            document.getElementById('editDueDate').value = dueDate.toISOString().slice(0, 16);
            
            document.getElementById('editPriority').value = todo.priority || 'low';
            document.getElementById('editCategory').value = todo.category || 'others';

            // Fill description items
            try {
                const descriptionItems = JSON.parse(todo.description);
                const container = document.getElementById('editDescriptionItems');
                container.innerHTML = '';
                
                if (Array.isArray(descriptionItems)) {
                    descriptionItems.forEach(item => {
                        addEditDescriptionItem(item);
                    });
                } else {
                    addEditDescriptionItem(descriptionItems);
                }
            } catch (e) {
                console.error('Error parsing description:', e);
                addEditDescriptionItem(todo.description);
            }

            // Show modal
            const modal = document.getElementById('editTodoModal');
            modal.classList.remove('hidden');
            modal.classList.add('flex');
        }

        function closeEditModal() {
            const modal = document.getElementById('editTodoModal');
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            document.getElementById('editTodoForm').reset();
            document.getElementById('editTodoForm').onsubmit = null;
        }

        function addEditDescriptionItem(value = '') {
            const container = document.getElementById('editDescriptionItems');
            const newItem = document.createElement('div');
            newItem.className = 'flex gap-2';
            newItem.innerHTML = `
                <input type="text" name="description[]" value="${value}"
                       class="flex-1 p-3 border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500">
                <button type="button" onclick="removeEditDescriptionItem(this)"
                        class="px-3 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200">
                    <i class="fas fa-times"></i>
                </button>
            `;
            container.appendChild(newItem);
        }

        // Add a separate remove function for edit description items
        function removeEditDescriptionItem(button) {
            const container = document.getElementById('editDescriptionItems');
            if (container.children.length > 1) {
                button.parentElement.remove();
            }
        }

        // Add button to add new description item in edit mode
        document.getElementById('editTodoForm')?.addEventListener('submit', function(e) {
            const descriptionInputs = this.querySelectorAll('input[name="description[]"]');
            if (descriptionInputs.length === 0) {
                e.preventDefault();
                addEditDescriptionItem('');
            }
        });
    </script>
</body>
</html> 